FROM node:23-alpine AS builder

LABEL maintainer="Jose Fernandez>"
LABEL version="1.0"
LABEL description="Jose Fernandez Digital House Project"

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++

# First copy only package files to leverage Docker cache
COPY frontend/package*.json ./

# Install dependencies with specific flags for production
RUN npm ci --only=production && \
    npm cache clean --force

# Copy application code
COPY frontend/ ./

# Copy environment file
COPY frontend/.env .env

# Build application
RUN npm run build && \
    # Remove source maps for production
    rm -rf build/**/*.map

# Stage 2: Production image
FROM nginx:alpine-slim

# Add nginx user
RUN adduser -D -H -u 1001 -s /sbin/nologin nginx-user

# Copy custom nginx configuration
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder --chown=nginx-user:nginx-user /app/build /usr/share/nginx/html

# Create cache directories and set permissions
RUN mkdir -p /var/cache/nginx && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    mkdir -p /var/run && \
    chown -R nginx-user:nginx-user /var/run && \
    chmod -R 755 /usr/share/nginx/html && \
    sed -i '/user  nginx;/d' /etc/nginx/nginx.conf && \
    echo 'user nginx-user;' > /tmp/nginx.conf && \
    cat /etc/nginx/nginx.conf >> /tmp/nginx.conf && \
    mv /tmp/nginx.conf /etc/nginx/nginx.conf

# Add security headers
RUN echo "add_header X-Frame-Options 'SAMEORIGIN';" >> /etc/nginx/conf.d/default.conf && \
    echo "add_header X-Content-Type-Options 'nosniff';" >> /etc/nginx/conf.d/default.conf && \
    echo "add_header X-XSS-Protection '1; mode=block';" >> /etc/nginx/conf.d/default.conf

# Switch to non-root user
USER nginx-user

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s \
    CMD wget -q --spider http://localhost:80/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]